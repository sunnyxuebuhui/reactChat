{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport Animate from 'rc-animate';\nimport LazyRenderBox from './LazyRenderBox';\n\nfunction noop() {}\n\nvar Dialog = function (_React$Component) {\n  _inherits(Dialog, _React$Component);\n\n  function Dialog() {\n    _classCallCheck(this, Dialog);\n\n    var _this = _possibleConstructorReturn(this, (Dialog.__proto__ || Object.getPrototypeOf(Dialog)).apply(this, arguments));\n\n    _this.getDialogElement = function () {\n      var props = _this.props;\n      var closable = props.closable;\n      var prefixCls = props.prefixCls;\n      var footer = void 0;\n\n      if (props.footer) {\n        footer = React.createElement(\"div\", {\n          className: prefixCls + '-footer',\n          ref: function ref(el) {\n            return _this.footerRef = el;\n          }\n        }, props.footer);\n      }\n\n      var header = void 0;\n\n      if (props.title) {\n        header = React.createElement(\"div\", {\n          className: prefixCls + '-header',\n          ref: function ref(el) {\n            return _this.headerRef = el;\n          }\n        }, React.createElement(\"div\", {\n          className: prefixCls + '-title'\n        }, props.title));\n      }\n\n      var closer = void 0;\n\n      if (closable) {\n        closer = React.createElement(\"button\", {\n          onClick: _this.close,\n          \"aria-label\": \"Close\",\n          className: prefixCls + '-close'\n        }, React.createElement(\"span\", {\n          className: prefixCls + '-close-x'\n        }));\n      }\n\n      var transitionName = _this.getTransitionName();\n\n      var dialogElement = React.createElement(LazyRenderBox, {\n        key: \"dialog-element\",\n        role: \"document\",\n        ref: function ref(el) {\n          return _this.dialogRef = el;\n        },\n        style: props.style || {},\n        className: prefixCls + ' ' + (props.className || ''),\n        visible: props.visible\n      }, React.createElement(\"div\", {\n        className: prefixCls + '-content'\n      }, closer, header, React.createElement(\"div\", {\n        className: prefixCls + '-body',\n        style: props.bodyStyle,\n        ref: function ref(el) {\n          return _this.bodyRef = el;\n        }\n      }, props.children), footer));\n      return React.createElement(Animate, {\n        key: \"dialog\",\n        showProp: \"visible\",\n        onAppear: _this.onAnimateAppear,\n        onLeave: _this.onAnimateLeave,\n        transitionName: transitionName,\n        component: \"\",\n        transitionAppear: true\n      }, dialogElement);\n    };\n\n    _this.onAnimateAppear = function () {\n      document.body.style.overflow = 'hidden';\n    };\n\n    _this.onAnimateLeave = function () {\n      document.body.style.overflow = '';\n\n      if (_this.wrapRef) {\n        _this.wrapRef.style.display = 'none';\n      }\n\n      if (_this.props.onAnimateLeave) {\n        _this.props.onAnimateLeave();\n      }\n\n      if (_this.props.afterClose) {\n        _this.props.afterClose();\n      }\n    };\n\n    _this.close = function (e) {\n      if (_this.props.onClose) {\n        _this.props.onClose(e);\n      }\n    };\n\n    _this.onMaskClick = function (e) {\n      if (e.target === e.currentTarget) {\n        _this.close(e);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Dialog, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      // fix: react@16 no dismissing animation\n      document.body.style.overflow = '';\n\n      if (this.wrapRef) {\n        this.wrapRef.style.display = 'none';\n      }\n    }\n  }, {\n    key: 'getZIndexStyle',\n    value: function getZIndexStyle() {\n      var style = {};\n      var props = this.props;\n\n      if (props.zIndex !== undefined) {\n        style.zIndex = props.zIndex;\n      }\n\n      return style;\n    }\n  }, {\n    key: 'getWrapStyle',\n    value: function getWrapStyle() {\n      var wrapStyle = this.props.wrapStyle || {};\n      return _extends({}, this.getZIndexStyle(), wrapStyle);\n    }\n  }, {\n    key: 'getMaskStyle',\n    value: function getMaskStyle() {\n      var maskStyle = this.props.maskStyle || {};\n      return _extends({}, this.getZIndexStyle(), maskStyle);\n    }\n  }, {\n    key: 'getMaskTransitionName',\n    value: function getMaskTransitionName() {\n      var props = this.props;\n      var transitionName = props.maskTransitionName;\n      var animation = props.maskAnimation;\n\n      if (!transitionName && animation) {\n        transitionName = props.prefixCls + '-' + animation;\n      }\n\n      return transitionName;\n    }\n  }, {\n    key: 'getTransitionName',\n    value: function getTransitionName() {\n      var props = this.props;\n      var transitionName = props.transitionName;\n      var animation = props.animation;\n\n      if (!transitionName && animation) {\n        transitionName = props.prefixCls + '-' + animation;\n      }\n\n      return transitionName;\n    }\n  }, {\n    key: 'getMaskElement',\n    value: function getMaskElement() {\n      var props = this.props;\n      var maskElement = void 0;\n\n      if (props.mask) {\n        var maskTransition = this.getMaskTransitionName();\n        maskElement = React.createElement(LazyRenderBox, _extends({\n          style: this.getMaskStyle(),\n          key: \"mask-element\",\n          className: props.prefixCls + '-mask',\n          hiddenClassName: props.prefixCls + '-mask-hidden',\n          visible: props.visible\n        }, props.maskProps));\n\n        if (maskTransition) {\n          maskElement = React.createElement(Animate, {\n            key: \"mask\",\n            showProp: \"visible\",\n            transitionAppear: true,\n            component: \"\",\n            transitionName: maskTransition\n          }, maskElement);\n        }\n      }\n\n      return maskElement;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props;\n      var prefixCls = props.prefixCls,\n          maskClosable = props.maskClosable;\n      var style = this.getWrapStyle();\n\n      if (props.visible) {\n        style.display = null;\n      }\n\n      return React.createElement(\"div\", null, this.getMaskElement(), React.createElement(\"div\", _extends({\n        className: prefixCls + '-wrap ' + (props.wrapClassName || ''),\n        ref: function ref(el) {\n          return _this2.wrapRef = el;\n        },\n        onClick: maskClosable ? this.onMaskClick : undefined,\n        role: \"dialog\",\n        \"aria-labelledby\": props.title,\n        style: style\n      }, props.wrapProps), this.getDialogElement()));\n    }\n  }]);\n\n  return Dialog;\n}(React.Component);\n\nexport default Dialog;\nDialog.defaultProps = {\n  afterClose: noop,\n  className: '',\n  mask: true,\n  visible: false,\n  closable: true,\n  maskClosable: true,\n  prefixCls: 'rmc-dialog',\n  onClose: noop\n};","map":null,"metadata":{},"sourceType":"module"}