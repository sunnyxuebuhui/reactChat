{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\n/* eslint-disable func-names */\n\n/**\n * Created by jljsj on 16/1/27.\n */\n\nimport { getColor, parseColor, toFixed, stylesToCss, createMatrix, checkStyleName } from 'style-utils';\nimport easingTypes from './easing';\nimport _plugin from './plugins';\nimport StylePlugin from './plugin/StylePlugin';\nimport { startConvertToEndUnit } from './util.js';\nvar DEFAULT_EASING = 'easeInOutQuad';\nvar DEFAULT_DURATION = 450;\nvar DEFAULT_DELAY = 0;\n\nfunction noop() {}\n\n_plugin.push(StylePlugin); // 设置默认数据\n\n\nfunction defaultData(vars, now) {\n  var duration = vars.duration || vars.duration === 0 ? vars.duration : DEFAULT_DURATION;\n  return {\n    duration: vars.type === 'set' ? 0 : duration,\n    delay: vars.delay || DEFAULT_DELAY,\n    ease: typeof vars.ease === 'function' ? vars.ease : easingTypes[vars.ease || DEFAULT_EASING],\n    onUpdate: vars.onUpdate || noop,\n    onComplete: vars.onComplete || noop,\n    onStart: vars.onStart || noop,\n    onRepeat: vars.onRepeat || noop,\n    repeat: vars.repeat || 0,\n    repeatDelay: vars.repeatDelay || 0,\n    yoyo: vars.yoyo || false,\n    type: vars.type === 'from' ? 'from' : 'to',\n    initTime: now,\n    appearTo: typeof vars.appearTo === 'number' ? vars.appearTo : null,\n    perTime: 0,\n    currentRepeat: 0\n  };\n}\n\nvar Tween = function Tween(target, toData, props) {\n  this.target = target;\n  this.attr = props.attr || 'style'; // 时间精度补齐；\n\n  this.accuracy = 0.00001; // 记录总时间;\n\n  this.totalTime = 0; // 记录当前时间;\n\n  this.progressTime = 0; // 记录时间轴数据;\n\n  this.defaultData = []; // 每个的开始数据；\n\n  this.start = {}; // 开始默认的数据；\n\n  this.startDefaultData = {}; // 动画过程\n\n  this.tween = {}; // toData;\n\n  this.data = toData; // 每帧的时间;\n\n  this.perFrame = Math.round(1000 / 60); // 注册，第一次进入执行注册\n\n  this.register = false; // svg元素\n\n  this.isSvg = this.target.ownerSVGElement; // 设置 style\n\n  var data = this.setAttrIsStyle(); // 设置默认动画数据;\n\n  this.setDefaultData(data);\n};\n\nvar p = Tween.prototype;\n\np.setAttrIsStyle = function () {\n  var _this = this;\n\n  var data = [];\n  this.data.forEach(function (d, i) {\n    var _d = _extends({}, d);\n\n    if (_this.attr === 'style') {\n      data[i] = {};\n      Object.keys(_d).forEach(function (key) {\n        if (key in defaultData({}, 0)) {\n          data[i][key] = _d[key];\n          delete _d[key];\n        }\n      });\n      data[i].style = _d;\n      _this.startDefaultData.style = _this.target.getAttribute('style');\n    } else if (_this.attr === 'attr') {\n      Object.keys(_d).forEach(function (key) {\n        if (key === 'style' && Array.isArray(d[key])) {\n          throw new Error('Style should be the object.');\n        }\n\n        if (key === 'bezier') {\n          _d.style = _extends({}, _d.style, {\n            bezier: _d[key]\n          });\n          delete _d[key];\n          _this.startDefaultData.style = _this.target.getAttribute('style');\n        } else {\n          _this.startDefaultData[key] = _this.target.getAttribute(key);\n        }\n      });\n      data[i] = _d;\n    }\n  });\n  return data;\n};\n\np.setDefaultData = function (_vars) {\n  var _this2 = this;\n\n  var now = 0;\n  var repeatMax = false;\n\n  var data = _vars.map(function (item) {\n    var appearToBool = typeof item.appearTo === 'number'; // 加上延时，在没有播放过时；\n\n    if (!appearToBool) {\n      now += item.delay || 0;\n    }\n\n    var appearToTime = (item.appearTo || 0) + (item.delay || 0); // 获取默认数据\n\n    var tweenData = defaultData(item, appearToBool ? appearToTime : now);\n    tweenData.vars = {};\n    Object.keys(item).forEach(function (_key) {\n      if (!(_key in tweenData)) {\n        var _data = item[_key];\n\n        if (_key in _plugin) {\n          tweenData.vars[_key] = new _plugin[_key](_this2.target, _data, tweenData.type);\n        } else if (_key.match(/color/i) || _key === 'stroke' || _key === 'fill') {\n          tweenData.vars[_key] = {\n            type: 'color',\n            vars: parseColor(_data)\n          };\n        } else if (typeof _data === 'number' || _data.split(/[,|\\s]/g).length <= 1) {\n          var vars = parseFloat(_data);\n\n          var unit = _data.toString().replace(/[^a-z|%]/g, '');\n\n          var count = _data.toString().replace(/[^+|=|-]/g, '');\n\n          tweenData.vars[_key] = {\n            unit: unit,\n            vars: vars,\n            count: count\n          };\n        } else if ((_key === 'd' || _key === 'points') && 'SVGMorph' in _plugin) {\n          tweenData.vars[_key] = new _plugin.SVGMorph(_this2.target, _data, _key);\n        }\n      }\n    });\n\n    if (tweenData.yoyo && !tweenData.repeat) {\n      console.warn('Warning: yoyo must be used together with repeat;'); // eslint-disable-line\n    }\n\n    if (tweenData.repeat === -1) {\n      repeatMax = true;\n    }\n\n    var repeat = tweenData.repeat === -1 ? 0 : tweenData.repeat;\n\n    if (appearToBool) {\n      // 如果有 appearTo 且这条时间比 now 大时，，总时间用这条；\n      var appearNow = item.appearTo + (item.delay || 0) + tweenData.duration * (repeat + 1) + tweenData.repeatDelay * repeat;\n      now = appearNow >= now ? appearNow : now;\n    } else if (tweenData.delay < -tweenData.duration) {\n      // 如果延时小于 负时间时,,不加,再减回延时;\n      now -= tweenData.delay;\n    } else {\n      // repeat 为 -1 只记录一次。不能跟 reverse 同时使用;\n      now += tweenData.duration * (repeat + 1) + tweenData.repeatDelay * repeat;\n    }\n\n    tweenData.mode = '';\n    return tweenData;\n  });\n\n  this.totalTime = repeatMax ? Number.MAX_VALUE : now;\n  this.defaultData = data;\n};\n\np.getComputedStyle = function () {\n  var style = typeof window !== 'undefined' && document.defaultView ? document.defaultView.getComputedStyle(this.target) : {}; // 如果是 SVG, 样式全部提出为 transformSVG, 兼容 safari 不能获取 transform;\n\n  if (this.isSvg) {\n    var transform = style[checkStyleName('transform')] || 'none';\n\n    if (transform === 'none') {\n      var attrStyle = this.target.getAttribute('style');\n\n      if (attrStyle && attrStyle.indexOf('transform:') >= 0) {\n        transform = attrStyle.split(';').filter(function (k) {\n          return k.indexOf('transform:') >= 0;\n        }).map(function (item) {\n          return createMatrix(item.split(':')[1].trim()).toString();\n        })[0];\n      } else if (this.target.getAttribute('transform')) {\n        // 暂时不支持标签上的 transform，后期增加;\n        console.warn('Do not add transform on the label, otherwise it will be invalid.'); // eslint-disable-line no-console\n      }\n    }\n\n    style.transformSVG = transform;\n  }\n\n  return style;\n};\n\np.getAnimStartData = function (item) {\n  var _this3 = this;\n\n  var start = {};\n  Object.keys(item).forEach(function (_key) {\n    if (_key in _plugin || _this3.attr === 'attr' && (_key === 'd' || _key === 'points')) {\n      _this3.computedStyle = _this3.computedStyle || _this3.getComputedStyle();\n      start[_key] = item[_key].getAnimStart(_this3.computedStyle, _this3.tween, _this3.isSvg);\n      return;\n    }\n\n    if (_this3.attr === 'attr') {\n      // 除了d和这points外的标签动画；\n      var attribute = _this3.target.getAttribute(_key);\n\n      var data = attribute === 'null' || !attribute ? 0 : attribute;\n\n      if (_key.match(/color/i) || _key === 'stroke' || _key === 'fill') {\n        data = !data && _key === 'stroke' ? 'rgba(255, 255, 255, 0)' : data;\n        data = parseColor(data);\n        start[_key] = data;\n      } else if (parseFloat(data) || parseFloat(data) === 0 || data === 0) {\n        var unit = data.toString().replace(/[^a-z|%]/g, '');\n        start[_key] = unit !== item[_key].unit ? startConvertToEndUnit(_this3.target, _key, parseFloat(data), unit, item[_key].unit) : parseFloat(data);\n      }\n\n      return;\n    }\n\n    start[_key] = _this3.target[_key] || 0;\n  });\n  return start;\n};\n\np.setAnimData = function (data) {\n  var _this4 = this;\n\n  Object.keys(data).forEach(function (key) {\n    if (key in _plugin || _this4.attr === 'attr' && (key === 'd' || key === 'points')) {\n      return;\n    }\n\n    _this4.target[key] = data[key];\n  });\n};\n\np.setRatio = function (ratio, endData, i) {\n  var _this5 = this;\n\n  Object.keys(endData.vars).forEach(function (_key) {\n    if (_key in _plugin || _this5.attr === 'attr' && (_key === 'd' || _key === 'points')) {\n      endData.vars[_key].setRatio(ratio, _this5.tween, _this5.isSvg && _this5.computedStyle);\n\n      return;\n    }\n\n    var endVars = endData.vars[_key];\n    var startVars = _this5.start[i][_key];\n    var data = void 0;\n\n    if (_this5.attr === 'attr') {\n      // 除了d和这points外的标签动画；\n      if (!endVars.type) {\n        data = endVars.unit.charAt(1) === '=' ? startVars + endVars.vars * ratio + endVars.unit : (endVars.vars - startVars) * ratio + startVars + endVars.unit;\n\n        _this5.target.setAttribute(_key, data);\n      } else if (endVars.type === 'color') {\n        if (endVars.vars.length === 3 && startVars.length === 4) {\n          endVars.vars[3] = 1;\n        }\n\n        data = endVars.vars.map(function (_endData, _i) {\n          var startData = startVars[_i] || 0;\n          return (_endData - startData) * ratio + startData;\n        });\n\n        _this5.target.setAttribute(_key, getColor(data));\n      }\n    }\n  });\n  this.setAnimData(this.tween);\n};\n\np.render = function () {\n  var _this6 = this;\n\n  var reverse = this.reverse;\n  this.defaultData.forEach(function (item, i) {\n    var initTime = item.initTime;\n    var duration = toFixed(item.duration); // 处理 yoyo 和 repeat; yoyo 是在时间轴上的, 并不是倒放\n\n    var repeatNum = Math.ceil((_this6.progressTime - initTime) / (duration + item.repeatDelay)) - 1 || 0;\n    repeatNum = repeatNum < 0 ? 0 : repeatNum;\n\n    if (item.repeat) {\n      if (item.repeat < repeatNum && item.repeat !== -1) {\n        return;\n      }\n\n      if (item.repeat || item.repeat <= repeatNum) {\n        initTime += repeatNum * (duration + item.repeatDelay);\n      }\n    }\n\n    var startData = item.yoyo && repeatNum % 2 ? 1 : 0;\n    var endData = item.yoyo && repeatNum % 2 ? 0 : 1;\n    startData = item.type === 'from' ? 1 - startData : startData;\n    endData = item.type === 'from' ? 1 - endData : endData; //  精度损失，只取小数点后10位。\n\n    var progressTime = toFixed(_this6.progressTime - initTime);\n    var ratio = void 0; // 开始注册;\n    // from 时需先执行参数位置;\n\n    var fromDelay = item.type === 'from' ? item.delay : 0;\n\n    if (progressTime + fromDelay >= 0) {\n      if (!_this6.start[i]) {\n        // 设置 start\n        _this6.start[i] = _this6.getAnimStartData(item.vars);\n\n        if (progressTime < _this6.perFrame) {\n          ratio = !item.duration && !item.delay ? item.ease(1, startData, endData, 1) : item.ease(0, startData, endData, 1);\n\n          _this6.setRatio(ratio, item, i);\n        } else if (progressTime > duration) {\n          ratio = item.ease(1, startData, endData, 1);\n\n          _this6.setRatio(ratio, item, i);\n        }\n\n        if (!_this6.register || i && !initTime) {\n          _this6.register = true;\n\n          if (progressTime === 0 && item.duration && item.delay) {\n            return;\n          }\n        }\n      }\n    }\n\n    var e = {\n      index: i,\n      target: _this6.target\n    };\n\n    var cb = _extends({\n      moment: _this6.progressTime\n    }, e);\n\n    var maxPer = _this6.perFrame - _this6.accuracy;\n    var startTime = item.delay && reverse ? -maxPer : 0;\n\n    if ((progressTime >= startTime && !(progressTime > duration && item.mode === 'onComplete') || progressTime < startTime && item.mode && item.mode !== 'onStart') && _this6.start[i]) {\n      var updateAnim = _this6.updateAnim === 'update';\n      progressTime = progressTime < maxPer && !reverse && item.duration >= _this6.perFrame ? 0 : progressTime;\n\n      if ((progressTime >= duration - _this6.accuracy && !reverse || reverse && progressTime <= 0) && repeatNum >= item.repeat) {\n        if (item.mode === 'onComplete') {\n          return;\n        } // onReveresComplete 和 onComplete 统一用 onComplete;\n\n\n        ratio = item.ease(reverse ? 0 : 1, startData, endData, 1);\n\n        _this6.setRatio(ratio, item, i, item.currentRepeat !== repeatNum);\n\n        if ((!item.reset || item.reset && progressTime >= duration) && !updateAnim) {\n          // duration 为 0 时的一个回调；\n          if (duration < maxPer) {\n            if (!duration) {\n              item.onStart(e);\n              cb.mode = 'onStart';\n\n              _this6.onChange(cb);\n            }\n\n            item.onUpdate(_extends({\n              ratio: ratio\n            }, e));\n            cb.mode = 'onUpdate';\n\n            _this6.onChange(cb);\n          }\n\n          item.onComplete(e);\n        } else if (progressTime >= duration + maxPer) {\n          return;\n        }\n\n        item.mode = 'onComplete';\n      } else if (duration > maxPer) {\n        var currentProgress = progressTime < 0 ? 0 : progressTime;\n        currentProgress = currentProgress > duration ? duration : currentProgress;\n        ratio = item.ease(currentProgress, startData, endData, duration);\n\n        _this6.setRatio(ratio, item, i);\n\n        if (!updateAnim) {\n          if (item.repeat && repeatNum > 0 && item.currentRepeat !== repeatNum) {\n            item.mode = 'onRepeat';\n            item.currentRepeat = repeatNum;\n            item.onRepeat(_extends({}, e, {\n              repeatNum: repeatNum\n            }));\n          } else if ((item.perTime <= 0 || reverse && item.perTime >= _this6.reverseStartTime - initTime) && item.mode !== 'onStart') {\n            // onReveresStart 和 onStart 统一用 onStart;\n            item.mode = 'onStart';\n            item.onStart(e);\n          } else {\n            item.mode = 'onUpdate';\n            item.onUpdate(_extends({\n              ratio: ratio\n            }, e));\n          }\n        }\n      }\n\n      if (!updateAnim) {\n        cb.mode = item.mode;\n\n        _this6.onChange(cb);\n      }\n\n      item.perTime = progressTime;\n\n      if (item.reset) {\n        delete item.reset;\n      }\n    }\n  });\n}; // 播放帧\n\n\np.frame = function (moment) {\n  var _this7 = this;\n\n  this.progressTime = moment;\n  this.defaultData.forEach(function (item) {\n    var t = _this7.progressTime - item.duration - item.initTime;\n\n    if (t < _this7.perFrame && t > 0) {\n      _this7.progressTime = item.duration + item.initTime;\n    }\n  });\n  this.render();\n};\n\np.resetAnimData = function () {\n  this.tween = {};\n  this.start = {};\n};\n\np.resetDefaultStyle = function () {\n  var _this8 = this;\n\n  this.tween = {};\n  this.defaultData = this.defaultData.map(function (item) {\n    item.reset = true;\n    delete item.mode;\n    return item;\n  });\n  Object.keys(this.startDefaultData).forEach(function (key) {\n    if (!(key in defaultData({}, 0))) {\n      _this8.target.setAttribute(key, _this8.startDefaultData[key]);\n\n      _this8.computedStyle = null;\n    }\n  });\n};\n\np.reStart = function (style) {\n  var _this9 = this;\n\n  this.start = {};\n  this.target.style.cssText = '';\n  Object.keys(style || {}).forEach(function (key) {\n    _this9.target.style[key] = stylesToCss(key, style[key]);\n  });\n  this.setAttrIsStyle();\n  this.resetDefaultStyle();\n};\n\np.onChange = noop;\nexport default Tween;","map":null,"metadata":{},"sourceType":"module"}