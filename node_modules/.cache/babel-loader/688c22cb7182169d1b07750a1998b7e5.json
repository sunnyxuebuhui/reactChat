{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _get from 'babel-runtime/helpers/get';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport Gesture from 'rc-gesture';\nimport { TabPane } from './TabPane';\nimport { DefaultTabBar } from './DefaultTabBar';\nimport { getTransformPropValue, setTransform, setPxStyle } from './util';\nimport { Tabs as Component, StateType as BaseStateType } from './Tabs.base';\n\nvar getPanDirection = function getPanDirection(direction) {\n  switch (direction) {\n    case 2:\n    case 4:\n      return 'horizontal';\n\n    case 8:\n    case 16:\n      return 'vertical';\n\n    default:\n      return 'none';\n  }\n};\n\nexport var StateType = function (_BaseStateType) {\n  _inherits(StateType, _BaseStateType);\n\n  function StateType() {\n    _classCallCheck(this, StateType);\n\n    var _this = _possibleConstructorReturn(this, (StateType.__proto__ || Object.getPrototypeOf(StateType)).apply(this, arguments));\n\n    _this.contentPos = '';\n    _this.isMoving = false;\n    return _this;\n  }\n\n  return StateType;\n}(BaseStateType);\nexport var Tabs = function (_Component) {\n  _inherits(Tabs, _Component);\n\n  function Tabs(props) {\n    _classCallCheck(this, Tabs);\n\n    var _this2 = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\n    _this2.onPan = function () {\n      var lastOffset = 0;\n      var finalOffset = 0;\n      var panDirection = void 0;\n\n      var getLastOffset = function getLastOffset() {\n        var isVertical = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this2.isTabVertical();\n        var offset = +('' + lastOffset).replace('%', '');\n\n        if (('' + lastOffset).indexOf('%') >= 0) {\n          offset /= 100;\n          offset *= isVertical ? _this2.layout.clientHeight : _this2.layout.clientWidth;\n        }\n\n        return offset;\n      };\n\n      return {\n        onPanStart: function onPanStart(status) {\n          if (!_this2.props.swipeable || !_this2.props.animated) return;\n          panDirection = getPanDirection(status.direction);\n\n          _this2.setState({\n            isMoving: true\n          });\n        },\n        onPanMove: function onPanMove(status) {\n          var _this2$props = _this2.props,\n              swipeable = _this2$props.swipeable,\n              animated = _this2$props.animated,\n              useLeftInsteadTransform = _this2$props.useLeftInsteadTransform;\n          if (!status.moveStatus || !_this2.layout || !swipeable || !animated) return;\n\n          var isVertical = _this2.isTabVertical();\n\n          var offset = getLastOffset();\n\n          if (isVertical) {\n            offset += panDirection === 'horizontal' ? 0 : status.moveStatus.y;\n          } else {\n            offset += panDirection === 'vertical' ? 0 : status.moveStatus.x;\n          }\n\n          var canScrollOffset = isVertical ? -_this2.layout.scrollHeight + _this2.layout.clientHeight : -_this2.layout.scrollWidth + _this2.layout.clientWidth;\n          offset = Math.min(offset, 0);\n          offset = Math.max(offset, canScrollOffset);\n          setPxStyle(_this2.layout, offset, 'px', isVertical, useLeftInsteadTransform);\n          finalOffset = offset;\n        },\n        onPanEnd: function onPanEnd() {\n          if (!_this2.props.swipeable || !_this2.props.animated) return;\n          lastOffset = finalOffset;\n\n          var isVertical = _this2.isTabVertical();\n\n          var offsetIndex = _this2.getOffsetIndex(finalOffset, isVertical ? _this2.layout.clientHeight : _this2.layout.clientWidth);\n\n          _this2.setState({\n            isMoving: false\n          });\n\n          if (offsetIndex === _this2.state.currentTab) {\n            if (_this2.props.usePaged) {\n              setTransform(_this2.layout.style, _this2.getContentPosByIndex(offsetIndex, _this2.isTabVertical(), _this2.props.useLeftInsteadTransform));\n            }\n          } else {\n            _this2.goToTab(offsetIndex);\n          }\n        },\n        setCurrentOffset: function setCurrentOffset(offset) {\n          return lastOffset = offset;\n        }\n      };\n    }();\n\n    _this2.onSwipe = function (status) {\n      var _this2$props2 = _this2.props,\n          tabBarPosition = _this2$props2.tabBarPosition,\n          swipeable = _this2$props2.swipeable,\n          usePaged = _this2$props2.usePaged;\n      if (!swipeable || !usePaged || _this2.isTabVertical()) return; // DIRECTION_NONE\t1\n      // DIRECTION_LEFT\t2\n      // DIRECTION_RIGHT\t4\n      // DIRECTION_UP\t8\n      // DIRECTION_DOWN\t16\n      // DIRECTION_HORIZONTAL\t6\n      // DIRECTION_VERTICAL\t24\n      // DIRECTION_ALL\t30\n\n      switch (tabBarPosition) {\n        case 'top':\n        case 'bottom':\n          switch (status.direction) {\n            case 2:\n              if (!_this2.isTabVertical()) {\n                _this2.goToTab(_this2.prevCurrentTab + 1);\n              }\n\n            case 8:\n              if (_this2.isTabVertical()) {\n                _this2.goToTab(_this2.prevCurrentTab + 1);\n              }\n\n              break;\n\n            case 4:\n              if (!_this2.isTabVertical()) {\n                _this2.goToTab(_this2.prevCurrentTab - 1);\n              }\n\n            case 16:\n              if (_this2.isTabVertical()) {\n                _this2.goToTab(_this2.prevCurrentTab - 1);\n              }\n\n              break;\n          }\n\n          break;\n      }\n    };\n\n    _this2.setContentLayout = function (div) {\n      _this2.layout = div;\n    };\n\n    _this2.state = _extends({}, _this2.state, new StateType(), {\n      contentPos: _this2.getContentPosByIndex(_this2.getTabIndex(props), _this2.isTabVertical(props.tabDirection), props.useLeftInsteadTransform)\n    });\n    return _this2;\n  }\n\n  _createClass(Tabs, [{\n    key: 'goToTab',\n    value: function goToTab(index) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var usePaged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.props.usePaged;\n      var _props = this.props,\n          tabDirection = _props.tabDirection,\n          useLeftInsteadTransform = _props.useLeftInsteadTransform;\n      var newState = {};\n\n      if (usePaged) {\n        newState = {\n          contentPos: this.getContentPosByIndex(index, this.isTabVertical(tabDirection), useLeftInsteadTransform)\n        };\n      }\n\n      return _get(Tabs.prototype.__proto__ || Object.getPrototypeOf(Tabs.prototype), 'goToTab', this).call(this, index, force, newState);\n    }\n  }, {\n    key: 'tabClickGoToTab',\n    value: function tabClickGoToTab(index) {\n      this.goToTab(index, false, true);\n    }\n  }, {\n    key: 'getContentPosByIndex',\n    value: function getContentPosByIndex(index, isVertical) {\n      var useLeft = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var value = -index * 100 + '%';\n      this.onPan.setCurrentOffset(value);\n\n      if (useLeft) {\n        return '' + value;\n      } else {\n        var translate = isVertical ? '0px, ' + value : value + ', 0px'; // fix: content overlay TabBar on iOS 10. ( 0px -> 1px )\n\n        return 'translate3d(' + translate + ', 1px)';\n      }\n    }\n  }, {\n    key: 'renderContent',\n    value: function renderContent() {\n      var _this3 = this;\n\n      var getSubElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSubElements();\n      var _props2 = this.props,\n          prefixCls = _props2.prefixCls,\n          tabs = _props2.tabs,\n          animated = _props2.animated,\n          destroyInactiveTab = _props2.destroyInactiveTab,\n          useLeftInsteadTransform = _props2.useLeftInsteadTransform;\n      var _state = this.state,\n          currentTab = _state.currentTab,\n          isMoving = _state.isMoving,\n          contentPos = _state.contentPos;\n      var isTabVertical = this.isTabVertical();\n      var contentCls = prefixCls + '-content-wrap';\n\n      if (animated && !isMoving) {\n        contentCls += ' ' + contentCls + '-animated';\n      }\n\n      var contentStyle = animated ? useLeftInsteadTransform ? _extends({\n        position: 'relative'\n      }, this.isTabVertical() ? {\n        top: contentPos\n      } : {\n        left: contentPos\n      }) : getTransformPropValue(contentPos) : _extends({\n        position: 'relative'\n      }, this.isTabVertical() ? {\n        top: -currentTab * 100 + '%'\n      } : {\n        left: -currentTab * 100 + '%'\n      });\n\n      var _getTabBarBaseProps = this.getTabBarBaseProps(),\n          instanceId = _getTabBarBaseProps.instanceId;\n\n      return React.createElement('div', {\n        className: contentCls,\n        style: contentStyle,\n        ref: this.setContentLayout\n      }, tabs.map(function (tab, index) {\n        var cls = prefixCls + '-pane-wrap';\n\n        if (_this3.state.currentTab === index) {\n          cls += ' ' + cls + '-active';\n        } else {\n          cls += ' ' + cls + '-inactive';\n        }\n\n        var key = tab.key || 'tab_' + index; // update tab cache\n\n        if (_this3.shouldRenderTab(index)) {\n          _this3.tabCache[index] = _this3.getSubElement(tab, index, getSubElements);\n        } else if (destroyInactiveTab) {\n          _this3.tabCache[index] = undefined;\n        }\n\n        return React.createElement(TabPane, {\n          key: key,\n          className: cls,\n          active: currentTab === index,\n          role: 'tabpanel',\n          'aria-hidden': currentTab !== index,\n          'aria-labelledby': 'm-tabs-' + instanceId + '-' + index,\n          fixX: isTabVertical,\n          fixY: !isTabVertical\n        }, _this3.tabCache[index]);\n      }));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          prefixCls = _props3.prefixCls,\n          tabBarPosition = _props3.tabBarPosition,\n          tabDirection = _props3.tabDirection,\n          useOnPan = _props3.useOnPan,\n          noRenderContent = _props3.noRenderContent;\n      var isTabVertical = this.isTabVertical(tabDirection);\n\n      var tabBarProps = _extends({}, this.getTabBarBaseProps());\n\n      var onPan = !isTabVertical && useOnPan ? this.onPan : {};\n      var content = [React.createElement('div', {\n        key: 'tabBar',\n        className: prefixCls + '-tab-bar-wrap'\n      }, this.renderTabBar(tabBarProps, DefaultTabBar)), !noRenderContent && React.createElement(Gesture, _extends({\n        key: '$content',\n        onSwipe: this.onSwipe\n      }, onPan), this.renderContent())];\n      return React.createElement('div', {\n        className: prefixCls + ' ' + prefixCls + '-' + tabDirection + ' ' + prefixCls + '-' + tabBarPosition\n      }, tabBarPosition === 'top' || tabBarPosition === 'left' ? content : content.reverse());\n    }\n  }]);\n\n  return Tabs;\n}(Component);\nTabs.DefaultTabBar = DefaultTabBar;\nTabs.defaultProps = _extends({}, Component.defaultProps, {\n  prefixCls: 'rmc-tabs',\n  useOnPan: true\n});","map":null,"metadata":{},"sourceType":"module"}