{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDom from 'react-dom';\nimport { dataToArray, objectEqual } from './util';\nimport Tween from './Tween';\nimport ticker from './ticker';\n\nfunction noop() {}\n\nvar perFrame = Math.round(1000 / 60);\nvar objectOrArray = PropTypes.oneOfType([PropTypes.object, PropTypes.array]);\n\nvar TweenOne = function (_Component) {\n  _inherits(TweenOne, _Component);\n\n  function TweenOne(props) {\n    _classCallCheck(this, TweenOne);\n\n    var _this = _possibleConstructorReturn(this, (TweenOne.__proto__ || Object.getPrototypeOf(TweenOne)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.rafID = -1;\n    _this.paused = props.paused;\n    _this.reverse = props.reverse;\n    _this.updateAnim = false;\n    _this.repeatNum = 0;\n    _this.forced = {};\n\n    _this.setForcedJudg(props);\n\n    return _this;\n  }\n\n  _createClass(TweenOne, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.dom = ReactDom.findDOMNode(this);\n\n      if (this.dom && this.dom.nodeName !== '#text') {\n        this.start();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (!this.tween && !this.dom) {\n        this.updateAnim = true;\n        return;\n      } // 动画处理\n\n\n      var newAnimation = nextProps.animation;\n      var currentAnimation = this.props.animation;\n      var equal = objectEqual(currentAnimation, newAnimation);\n\n      if (!equal) {\n        if (nextProps.resetStyle && this.tween) {\n          this.tween.resetDefaultStyle();\n        }\n\n        this.updateAnim = true;\n      } // 跳帧事件 moment;\n\n\n      var nextMoment = nextProps.moment;\n\n      if (typeof nextMoment === 'number' && nextMoment !== this.props.moment) {\n        if (this.tween && !this.updateAnim) {\n          this.startMoment = nextMoment;\n          this.startFrame = ticker.frame;\n\n          if (nextProps.paused) {\n            this.raf();\n          }\n\n          if (this.tween.progressTime >= this.tween.totalTime) {\n            this.play();\n          }\n        } else {\n          this.updateAnim = true;\n        }\n      } // 暂停倒放\n\n\n      if (this.paused !== nextProps.paused || this.reverse !== nextProps.reverse) {\n        this.paused = nextProps.paused;\n        this.reverse = nextProps.reverse;\n\n        if (this.paused) {\n          this.cancelRequestAnimationFrame();\n        } else if (this.reverse && nextProps.reverseDelay) {\n          this.cancelRequestAnimationFrame();\n          ticker.timeout(this.restart, nextProps.reverseDelay);\n        } else {\n          // 在 form 状态下，暂停时拉 moment 时，start 有值恢复播放，在 delay 的时间没有处理。。\n          if (this.tween) {\n            this.tween.resetAnimData();\n            this.tween.resetDefaultStyle();\n          }\n\n          if (!this.updateAnim) {\n            this.restart();\n          }\n        }\n      }\n\n      var styleEqual = objectEqual(this.props.style, nextProps.style);\n\n      if (!styleEqual) {\n        // 在动画时更改了 style, 作为更改开始数值。\n        if (this.tween) {\n          this.tween.reStart(nextProps.style);\n\n          if (this.paused) {\n            this.raf();\n          }\n        }\n      }\n\n      this.setForcedJudg(nextProps);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      if (!this.dom) {\n        this.dom = ReactDom.findDOMNode(this);\n      } // 样式更新了后再执行动画；\n\n\n      if (this.updateAnim && this.dom && this.dom.nodeName !== '#text') {\n        if (this.tween) {\n          this.cancelRequestAnimationFrame();\n        }\n\n        this.start();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.cancelRequestAnimationFrame();\n    }\n    /**\n     * @method setForcedJudg\n     * @param props\n     * QueueAnim 套在组件下面后导至子级变化。\n     * <QueueAnim component={Menu} >\n     *   <SubMenu key=\"a\" title=\"导航\">\n     *     <Item />\n     *   </SubMenu>\n     * </QueueAnim>\n     * rc-Menu 里是以 isXXX 来判断是 rc-Menu 的子级;\n     * 如: 用 isSubMenu 来处理 hover 事件\n     * 地址: https://github.com/react-component/menu/blob/master/src/MenuMixin.js#L172\n     * 暂时方案: 在组件里添加判断用的值。\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var props = _extends({}, this.props);\n\n      ['animation', 'component', 'componentProps', 'reverseDelay', 'attr', 'paused', 'reverse', 'repeat', 'yoyo', 'moment', 'resetStyle', 'forcedJudg'].forEach(function (key) {\n        return delete props[key];\n      });\n      props.style = _extends({}, this.props.style);\n      Object.keys(props.style).forEach(function (p) {\n        if (p.match(/filter/i)) {\n          ['Webkit', 'Moz', 'Ms', 'ms'].forEach(function (prefix) {\n            props.style[prefix + 'Filter'] = props.style[p];\n          });\n        }\n      }); // component 为空时调用子级的。。\n\n      if (!this.props.component) {\n        if (!this.props.children) {\n          return this.props.children;\n        }\n\n        var childrenProps = this.props.children.props;\n        var style = childrenProps.style,\n            className = childrenProps.className; // 合并 style 与 className。\n\n        var newStyle = _extends({}, style, props.style);\n\n        var newClassName = props.className ? props.className + ' ' + className : className;\n        return React.cloneElement(this.props.children, {\n          style: newStyle,\n          className: newClassName\n        });\n      }\n\n      return React.createElement(this.props.component, _extends({}, props, this.props.componentProps));\n    }\n  }]);\n\n  return TweenOne;\n}(Component);\n\nTweenOne.propTypes = {\n  component: PropTypes.any,\n  componentProps: PropTypes.any,\n  animation: objectOrArray,\n  children: PropTypes.any,\n  style: PropTypes.object,\n  paused: PropTypes.bool,\n  reverse: PropTypes.bool,\n  reverseDelay: PropTypes.number,\n  yoyo: PropTypes.bool,\n  repeat: PropTypes.number,\n  moment: PropTypes.number,\n  attr: PropTypes.string,\n  onChange: PropTypes.func,\n  resetStyle: PropTypes.bool,\n  forcedJudg: PropTypes.object\n};\nTweenOne.defaultProps = {\n  component: 'div',\n  componentProps: {},\n  reverseDelay: 0,\n  repeat: 0,\n  attr: 'style',\n  onChange: noop\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.setForcedJudg = function (props) {\n    Object.keys(_this2.forced).forEach(function (key) {\n      delete _this2[key];\n      delete _this2.forced[key];\n    });\n\n    if (props.forcedJudg) {\n      Object.keys(props.forcedJudg).forEach(function (key) {\n        if (!_this2[key]) {\n          _this2[key] = props.forcedJudg[key];\n          _this2.forced[key] = 1;\n        }\n      });\n    }\n  };\n\n  this.setDefalut = function (props) {\n    _this2.moment = props.moment || 0;\n    _this2.startMoment = props.moment || 0;\n    _this2.startFrame = ticker.frame;\n  };\n\n  this.restart = function () {\n    if (!_this2.tween) {\n      return;\n    }\n\n    _this2.startMoment = _this2.moment;\n    _this2.startFrame = ticker.frame;\n    _this2.tween.reverse = _this2.reverse;\n    _this2.tween.reverseStartTime = _this2.startMoment;\n\n    _this2.raf();\n\n    _this2.play();\n  };\n\n  this.start = function () {\n    _this2.updateAnim = false;\n    var props = _this2.props;\n\n    if (props.animation && Object.keys(props.animation).length) {\n      _this2.setDefalut(props);\n\n      _this2.tween = new Tween(_this2.dom, dataToArray(props.animation), {\n        attr: props.attr\n      });\n      _this2.tween.reverse = _this2.reverse; // 预先注册 raf, 初始动画数值。\n\n      _this2.raf(); // 开始动画\n\n\n      _this2.play();\n    } else {\n      _this2.tween = null;\n    }\n  };\n\n  this.play = function () {\n    _this2.cancelRequestAnimationFrame();\n\n    if (_this2.paused) {\n      return;\n    }\n\n    _this2.rafID = ticker.add(_this2.raf);\n  };\n\n  this.frame = function () {\n    var yoyo = _this2.props.yoyo;\n    var repeat = _this2.props.repeat;\n    var totalTime = repeat === -1 ? Number.MAX_VALUE : _this2.tween.totalTime * (repeat + 1);\n    repeat = repeat >= 0 ? repeat : Number.MAX_VALUE;\n    var moment = (ticker.frame - _this2.startFrame) * perFrame + _this2.startMoment;\n\n    if (_this2.reverse) {\n      moment = (_this2.startMoment || 0) - (ticker.frame - _this2.startFrame) * perFrame;\n    }\n\n    moment = moment > totalTime ? totalTime : moment;\n    moment = moment <= 0 ? 0 : moment;\n    var repeatNum = Math.floor(moment / _this2.tween.totalTime) || 0;\n    repeatNum = repeatNum > repeat ? repeat : repeatNum;\n    var tweenMoment = moment - _this2.tween.totalTime * repeatNum;\n    tweenMoment = tweenMoment < perFrame && !_this2.reverse && totalTime >= perFrame ? 0 : tweenMoment;\n\n    if (repeat && moment && moment - _this2.tween.totalTime * repeatNum < perFrame) {\n      // 在重置样式之前补 complete；\n      _this2.tween.frame(_this2.tween.totalTime * repeatNum);\n    }\n\n    if (moment < _this2.moment && !_this2.reverse || repeat !== 0 && repeatNum && repeatNum !== _this2.repeatNum) {\n      // 在 form 状态下，暂停时拉 moment 时，start 有值，，往返方向播放时，在 delay 的时间没有处理。。\n      // 与上面的处理一样，删除 start ，重新走一遍 start。。\n      _this2.tween.resetAnimData();\n\n      _this2.tween.resetDefaultStyle();\n    }\n\n    var yoyoReverse = yoyo && repeatNum % 2;\n\n    if (yoyoReverse) {\n      tweenMoment = _this2.tween.totalTime - tweenMoment;\n    }\n\n    _this2.tween.onChange = function (e) {\n      var cb = _extends({}, e, {\n        timelineMode: ''\n      });\n\n      if (_this2.moment === _this2.startMoment && !_this2.reverse && !e.index && e.mode === 'onStart' || _this2.reverse) {\n        cb.timelineMode = 'onTimelineStart';\n      } else if (moment >= totalTime && !_this2.reverse || !moment && _this2.reverse) {\n        cb.timelineMode = 'onTimelineComplete';\n      } else if (repeatNum !== _this2.timelineRepeatNum) {\n        cb.timelineMode = 'onTimelineRepeat';\n      } else {\n        cb.timelineMode = 'onTimelineUpdate';\n      }\n\n      _this2.timelineRepeatNum = repeatNum;\n\n      _this2.props.onChange(cb);\n    };\n\n    _this2.moment = moment;\n    _this2.repeatNum = repeatNum;\n\n    _this2.tween.frame(tweenMoment);\n  };\n\n  this.raf = function () {\n    var tween = _this2.tween;\n\n    _this2.frame();\n\n    if (tween !== _this2.tween) {\n      // 在 onComplete 时更换动画时，raf 没结束，所以需要强制退出，避逸两个时间的冲突。\n      return null;\n    }\n\n    var repeat = _this2.props.repeat;\n    var totalTime = repeat === -1 ? Number.MAX_VALUE : _this2.tween.totalTime * (repeat + 1);\n\n    if (_this2.moment >= totalTime && !_this2.reverse || _this2.paused || _this2.reverse && _this2.moment === 0) {\n      return _this2.cancelRequestAnimationFrame();\n    }\n\n    return null;\n  };\n\n  this.cancelRequestAnimationFrame = function () {\n    ticker.clear(_this2.rafID);\n    _this2.rafID = -1;\n  };\n};\n\nTweenOne.isTweenOne = true;\nexport default TweenOne;","map":null,"metadata":{},"sourceType":"module"}