{"ast":null,"code":"import React from 'react';\nexport var windowIsUndefined = !(typeof window !== 'undefined' && window.document && window.document.createElement);\nexport function toArrayChildren(children) {\n  var ret = [];\n  React.Children.forEach(children, function (c) {\n    ret.push(c);\n  });\n  return ret;\n}\nexport function dataToArray(vars) {\n  if (!vars && vars !== 0) {\n    return [];\n  }\n\n  if (Array.isArray(vars)) {\n    return vars;\n  }\n\n  return [vars];\n}\n\nfunction deepEql(a, b) {\n  if (!a || !b) {\n    return false;\n  }\n\n  var $a = Object.keys(a);\n  var $b = Object.keys(b);\n\n  if ($a.length && $b.length && $a.length === $b.length) {\n    return !$a.some(function (key) {\n      var aa = a[key];\n      var bb = b[key];\n\n      if (Array.isArray(aa) && Array.isArray(bb)) {\n        aa = aa.join();\n        bb = bb.join();\n      }\n\n      return aa !== bb;\n    });\n  }\n\n  return false;\n}\n\nexport function objectEqual(obj1, obj2) {\n  if (obj1 === obj2 || deepEql(obj1, obj2)) {\n    return true;\n  }\n\n  if (!obj1 || !obj2) {\n    return false;\n  } // animation 写在标签上的进行判断是否相等， 判断每个参数有没有 function;\n\n\n  var equalBool = true;\n\n  if (Array.isArray(obj1) && Array.isArray(obj2)) {\n    if (obj1.length !== obj2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < obj1.length; i++) {\n      var currentObj = obj1[i];\n      var nextObj = obj2[i];\n\n      for (var p in currentObj) {\n        // eslint-disable-line no-restricted-syntax\n        if (currentObj[p] !== nextObj[p]) {\n          if (typeof currentObj[p] === 'object' && typeof nextObj[p] === 'object') {\n            equalBool = objectEqual(currentObj[p], nextObj[p]);\n          } else if (typeof currentObj[p] === 'function' && typeof nextObj[p] === 'function') {\n            if (currentObj[p].name !== nextObj[p].name) {\n              equalBool = false;\n            }\n          } else {\n            equalBool = false;\n          }\n\n          if (!equalBool) {\n            return false;\n          }\n        }\n      }\n    }\n  }\n\n  var setEqualBool = function setEqualBool(objA, objB) {\n    Object.keys(objA).forEach(function (key) {\n      // 如果前面有参数匹配不相同则直接返回；\n      if (!equalBool) {\n        return;\n      }\n\n      if (!(key in objB)) {\n        equalBool = false;\n      }\n\n      if (typeof objA[key] === 'object' && typeof objB[key] === 'object') {\n        equalBool = objectEqual(objA[key], objB[key]);\n      } else if (typeof objA[key] === 'function' && typeof objB[key] === 'function') {\n        if (objA[key].name !== objB[key].name) {\n          equalBool = false;\n        }\n      } else if (objA[key] !== objB[key]) {\n        equalBool = false;\n      }\n    });\n  };\n\n  setEqualBool(obj1, obj2);\n  setEqualBool(obj2, obj1);\n  return equalBool;\n}\nexport function findChildInChildrenByKey(children, key) {\n  var ret = null;\n\n  if (children) {\n    children.forEach(function (c) {\n      if (ret || !c) {\n        return;\n      }\n\n      if (c.key === key) {\n        ret = c;\n      }\n    });\n  }\n\n  return ret;\n}\nexport function mergeChildren(prev, next) {\n  var ret = []; // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n  var nextChildrenPending = {};\n  var pendingChildren = [];\n  var followChildrenKey = void 0;\n  prev.forEach(function (c) {\n    if (!c) {\n      return;\n    }\n\n    if (findChildInChildrenByKey(next, c.key)) {\n      if (pendingChildren.length) {\n        nextChildrenPending[c.key] = pendingChildren;\n        pendingChildren = [];\n      }\n\n      followChildrenKey = c.key;\n    } else if (c.key) {\n      pendingChildren.push(c);\n    }\n  });\n\n  if (!followChildrenKey) {\n    ret = ret.concat(pendingChildren);\n  }\n\n  next.forEach(function (c) {\n    if (!c) {\n      return;\n    }\n\n    if (nextChildrenPending.hasOwnProperty(c.key)) {\n      // eslint-disable-line no-prototype-builtins\n      ret = ret.concat(nextChildrenPending[c.key]);\n    }\n\n    ret.push(c);\n\n    if (c.key === followChildrenKey) {\n      ret = ret.concat(pendingChildren);\n    }\n  });\n  return ret;\n}\nexport function transformArguments(arg, key, i) {\n  var result = void 0;\n\n  if (typeof arg === 'function') {\n    result = arg({\n      key: key,\n      index: i\n    });\n  } else {\n    result = arg;\n  }\n\n  return result;\n}\nexport function getChildrenFromProps(props) {\n  return props && props.children;\n}\nexport function startConvertToEndUnit(target, computedStyle, style, num, unit, dataUnit, fixed, isOriginWidth) {\n  if (windowIsUndefined) {\n    return num;\n  }\n\n  var horiz = /(?:Left|Right|Width|X)/i.test(style) || isOriginWidth;\n  horiz = style === 'padding' || style === 'marign' ? true : horiz;\n  var t = style.indexOf('border') !== -1 || style.indexOf('translate') !== -1 || style === 'transformOrigin' ? target : target.parentNode || document.body;\n  t = fixed ? document.body : t;\n  var pix = void 0;\n  var htmlComputedStyle = void 0; // transform 在 safari 下会留着单位，chrome 下会全部转换成 px;\n\n  switch (unit) {\n    case '%':\n      pix = parseFloat(num) / 100 * (horiz ? t.clientWidth : t.clientHeight);\n      break;\n\n    case 'vw':\n      pix = parseFloat(num) * document.body.clientWidth / 100;\n      break;\n\n    case 'vh':\n      pix = parseFloat(num) * document.body.clientHeight / 100;\n      break;\n\n    case 'em':\n      pix = parseFloat(num) * parseFloat(computedStyle.fontSize);\n      break;\n\n    case 'rem':\n      {\n        htmlComputedStyle = window.getComputedStyle(document.getElementsByTagName('html')[0]);\n        pix = parseFloat(num) * parseFloat(htmlComputedStyle.fontSize);\n        break;\n      }\n\n    default:\n      pix = parseFloat(num);\n      break;\n  }\n\n  switch (dataUnit) {\n    case '%':\n      pix = pix ? pix * 100 / (horiz ? t.clientWidth : t.clientHeight) : 0;\n      break;\n\n    case 'vw':\n      pix = parseFloat(num) / document.body.clientWidth * 100;\n      break;\n\n    case 'vh':\n      pix = parseFloat(num) / document.body.clientHeight * 100;\n      break;\n\n    case 'em':\n      pix = parseFloat(num) / parseFloat(computedStyle.fontSize);\n      break;\n\n    case 'rem':\n      {\n        htmlComputedStyle = htmlComputedStyle || window.getComputedStyle(document.getElementsByTagName('html')[0]);\n        pix = parseFloat(num) / parseFloat(htmlComputedStyle.fontSize);\n        break;\n      }\n\n    default:\n      break;\n  }\n\n  return pix;\n}\nexport function parsePath(path) {\n  if (typeof path === 'string') {\n    if (path.charAt(0).match(/m/i)) {\n      var domPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n      domPath.setAttributeNS(null, 'd', path);\n      return domPath;\n    }\n\n    return document.querySelector(path);\n  } else if (path.style) {\n    return path;\n  }\n\n  throw new Error('Error while parsing the path');\n}\nexport function getTransformValue(t) {\n  if (typeof t === 'string') {\n    return t;\n  }\n\n  var perspective = t.perspective;\n  var angle = t.rotate;\n  var rotateX = t.rotateX;\n  var rotateY = t.rotateY;\n  var sx = t.scaleX;\n  var sy = t.scaleY;\n  var sz = t.scaleZ;\n  var skx = t.skewX;\n  var sky = t.skewY;\n  var translateX = typeof t.translateX === 'string' ? t.translateX : t.translateX + 'px';\n  var translateY = typeof t.translateY === 'string' ? t.translateY : t.translateY + 'px';\n  var translateZ = typeof t.translateZ === 'string' ? t.translateZ : t.translateZ + 'px';\n  var sk = skx || sky ? 'skew(' + skx + 'deg,' + sky + 'deg)' : '';\n  var an = angle ? 'rotate(' + angle + 'deg)' : '';\n  var ss = sx !== 1 || sy !== 1 || sz !== 1 ? 'scale3d(' + sx + ',' + sy + ',' + sz + ')' : '';\n  var rX = rotateX ? 'rotateX(' + rotateX + 'deg)' : '';\n  var rY = rotateY ? 'rotateY(' + rotateY + 'deg)' : '';\n  var per = perspective ? 'perspective(' + perspective + 'px)' : '';\n  var defautlTranslate = ss || an || rX || rY || sk ? '' : 'translate(0px, 0px)';\n  var translate = t.translateZ ? 'translate3d(' + translateX + ',' + translateY + ',' + translateZ + ')' : (t.translateX || t.translateY) && 'translate(' + translateX + ',' + translateY + ')' || defautlTranslate;\n  return (per + ' ' + translate + ' ' + ss + ' ' + an + ' ' + rX + ' ' + rY + ' ' + sk).trim();\n}","map":null,"metadata":{},"sourceType":"module"}