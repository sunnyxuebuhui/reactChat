{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport TweenOne, { ticker } from 'rc-tween-one';\nimport { toArrayChildren, findChildInChildrenByKey, mergeChildren, transformArguments, getChildrenFromProps } from './utils';\nimport AnimTypes from './animTypes';\n\nvar noop = function noop() {};\n\nvar typeDefault = ['displayName', 'propTypes', 'getDefaultProps', 'defaultProps', 'childContextTypes', 'contextTypes'];\n\nvar QueueAnim = function (_React$Component) {\n  _inherits(QueueAnim, _React$Component);\n\n  function QueueAnim(props) {\n    _classCallCheck(this, QueueAnim);\n    /**\n     * @param oneEnter\n     * 记录第一次进入;\n     */\n\n\n    var _this = _possibleConstructorReturn(this, (QueueAnim.__proto__ || Object.getPrototypeOf(QueueAnim)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.oneEnter = false;\n    /**\n     * @param tweenToEnter;\n     * 记录强制切换时是否需要添加 animation;\n     * 如 enter 后, leave -> enter，样式是没有发生变化，就不需要添加 animation 属性。\n     */\n\n    _this.tweenToEnter = {};\n    /**\n     * @param leaveUnfinishedChild;\n     * 记录多次切换，出场没完成动画的 key。\n     */\n\n    _this.leaveUnfinishedChild = [];\n    /**\n     * @param saveTweenOneTag;\n     * 记录 TweenOne 标签，在 leaveUnfinishedChild 里使用，残留的元素不需要考虑 props 的变更。\n     */\n\n    _this.saveTweenOneTag = {};\n    /**\n     * @param childrenShow;\n     * 记录 animation 里是否需要 startAnim;\n     * 当前元素是否处在显示状态\n     * enterBegin 到 leaveComplete 之前都处于显示状态\n     */\n\n    _this.childrenShow = {};\n    /**\n     * @param keysToEnter;\n     * 记录进场的 key;\n     */\n\n    _this.keysToEnter = [];\n    /**\n     * @param keysToLeave;\n     * 记录出场的 key;\n     */\n\n    _this.keysToLeave = [];\n    /**\n     * @param keysToEnterPaused;\n     * 记录在进入时是否处理暂停状态\n     */\n\n    _this.keysToEnterPaused = {};\n    /**\n     * @param placeholderTimeoutIds;\n     * 进场时 deley 的 timeout 记录;\n     */\n\n    _this.placeholderTimeoutIds = {}; // 第一次进入，默认进场\n\n    var children = toArrayChildren(getChildrenFromProps(props));\n    var childrenShow = {};\n    children.forEach(function (child) {\n      if (!child || !child.key) {\n        return;\n      }\n\n      if (_this.props.appear) {\n        _this.keysToEnter.push(child.key);\n      } else {\n        childrenShow[child.key] = true;\n      }\n    });\n    _this.keysToEnterToCallback = [].concat(_toConsumableArray(_this.keysToEnter));\n    _this.originalChildren = toArrayChildren(getChildrenFromProps(props));\n    _this.state = {\n      children: children,\n      childrenShow: childrenShow\n    };\n    return _this;\n  }\n\n  _createClass(QueueAnim, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.appear) {\n        this.componentDidUpdate();\n      }\n\n      this.oneEnter = true;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      var nextChildren = toArrayChildren(nextProps.children).filter(function (item) {\n        return item;\n      });\n      var currentChildren = this.originalChildren.filter(function (item) {\n        return item;\n      });\n\n      if (this.state.children.length) {\n        /**\n         * 多次刷新处理\n         * 如果 state.children 里还有元素，元素还在动画，当前子级加回在出场的子级;\n         */\n        var leaveChild = this.state.children.filter(function (item) {\n          return item && _this2.keysToLeave.indexOf(item.key) >= 0;\n        });\n        this.leaveUnfinishedChild = leaveChild.map(function (item) {\n          return item.key;\n        });\n        /**\n         * 获取 leaveChild 在 state.children 里的序列，再将 leaveChild 和 currentChildren 的重新排序。\n         * 避逸 state.children 在 leaveComplete 里没全部完成不触发，\n         * leaveComplete 里如果动画完成了是会删除 keyToLeave，但 state.children 是在全部出场后才触发清除，\n         * 所以这里需要处理出场完成的元素做清除。\n         */\n\n        var stateChildrens = mergeChildren(currentChildren, this.state.children);\n        var currentChild = [];\n\n        var childReOrder = function childReOrder(child) {\n          child.forEach(function (item) {\n            var order = stateChildrens.indexOf(item); // -1 不应该出现的情况，直接插入数组后面.\n\n            if (order === -1) {\n              currentChild.push(item);\n            } else {\n              currentChild.splice(order, 0, item);\n            }\n          });\n        };\n\n        childReOrder(leaveChild);\n        childReOrder(currentChildren);\n        currentChildren = currentChild.filter(function (c) {\n          return c;\n        });\n      }\n\n      var newChildren = mergeChildren(currentChildren, nextChildren);\n      var childrenShow = !newChildren.length ? {} : this.state.childrenShow;\n      this.keysToEnterPaused = {};\n      var emptyBool = !nextChildren.length && !currentChildren.length && this.state.children.length;\n      /**\n       * 在出场没结束时，childrenShow 里的值将不会清除。\n       * 再触发进场时， childrenShow 里的值是保留着的, 设置了 forcedReplay 将重新播放进场。\n       */\n\n      if (!emptyBool) {\n        // 空子级状态下刷新不做处理\n        var nextKeys = nextChildren.map(function (c) {\n          return c.key;\n        });\n        this.keysToLeave.forEach(function (key) {\n          // 将所有在出场里的停止掉。避免间隔性出现\n          if (nextKeys.indexOf(key) >= 0) {\n            _this2.keysToEnterPaused[key] = true;\n            currentChildren = currentChildren.filter(function (item) {\n              return item.key !== key;\n            });\n\n            if (nextProps.forcedReplay) {\n              // 清掉所有出场的。\n              delete childrenShow[key];\n            }\n          }\n        });\n      }\n\n      this.keysToEnter = [];\n      this.keysToLeave = []; // need render to avoid update\n\n      this.setState({\n        childrenShow: childrenShow,\n        children: newChildren\n      });\n      nextChildren.forEach(function (c) {\n        if (!c) {\n          return;\n        }\n\n        var key = c.key;\n        var hasPrev = findChildInChildrenByKey(currentChildren, key);\n\n        if (!hasPrev && key) {\n          _this2.keysToEnter.push(key);\n        }\n      });\n      currentChildren.forEach(function (c) {\n        if (!c) {\n          return;\n        }\n\n        var key = c.key;\n        var hasNext = findChildInChildrenByKey(nextChildren, key);\n\n        if (!hasNext && key) {\n          _this2.keysToLeave.push(key);\n\n          ticker.clear(_this2.placeholderTimeoutIds[key]);\n          delete _this2.placeholderTimeoutIds[key];\n        }\n      });\n      this.keysToEnterToCallback = [].concat(_toConsumableArray(this.keysToEnter));\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.originalChildren = toArrayChildren(getChildrenFromProps(this.props));\n      var keysToEnter = [].concat(_toConsumableArray(this.keysToEnter));\n      var keysToLeave = [].concat(_toConsumableArray(this.keysToLeave));\n      keysToEnter.forEach(this.performEnter);\n      keysToLeave.forEach(this.performLeave);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var _this3 = this;\n\n      Object.keys(this.placeholderTimeoutIds).forEach(function (key) {\n        ticker.clear(_this3.placeholderTimeoutIds[key]);\n      });\n      this.keysToEnter = [];\n      this.keysToLeave = [];\n      this.childrenShow = {};\n    }\n  }, {\n    key: 'getTweenType',\n    value: function getTweenType(type, num) {\n      var data = AnimTypes[type];\n      return this.getTweenAnimConfig(data, num);\n    }\n  }, {\n    key: 'getTweenAnimConfig',\n    value: function getTweenAnimConfig(data, num, enterOrLeave) {\n      var _this4 = this;\n\n      if (Array.isArray(data)) {\n        return data.map(function (item) {\n          return _this4.getTweenSingleConfig(item, num, enterOrLeave);\n        });\n      }\n\n      return this.getTweenSingleConfig(data, num, enterOrLeave);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var tagProps = _objectWithoutProperties(this.props, []);\n\n      ['component', 'componentProps', 'interval', 'duration', 'delay', 'type', 'animConfig', 'ease', 'leaveReverse', 'animatingClassName', 'forcedReplay', 'onEnd', 'appear'].forEach(function (key) {\n        return delete tagProps[key];\n      });\n      var childrenToRender = toArrayChildren(this.state.children).map(this.getChildrenToRender);\n\n      var props = _extends({}, tagProps, this.props.componentProps);\n\n      return createElement(this.props.component, props, childrenToRender);\n    }\n  }]);\n\n  return QueueAnim;\n}(React.Component);\n\nQueueAnim.propTypes = {\n  children: PropTypes.any,\n  component: PropTypes.any,\n  componentProps: PropTypes.object,\n  interval: PropTypes.any,\n  duration: PropTypes.any,\n  delay: PropTypes.any,\n  type: PropTypes.any,\n  animConfig: PropTypes.any,\n  ease: PropTypes.any,\n  leaveReverse: PropTypes.bool,\n  forcedReplay: PropTypes.bool,\n  animatingClassName: PropTypes.array,\n  onEnd: PropTypes.func,\n  appear: PropTypes.bool\n};\nQueueAnim.defaultProps = {\n  component: 'div',\n  componentProps: {},\n  interval: 100,\n  duration: 450,\n  delay: 0,\n  type: 'right',\n  animConfig: null,\n  ease: 'easeOutQuart',\n  leaveReverse: false,\n  forcedReplay: false,\n  animatingClassName: ['queue-anim-entering', 'queue-anim-leaving'],\n  onEnd: noop,\n  appear: true\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this5 = this;\n\n  this.getTweenSingleConfig = function (data, num, enterOrLeave) {\n    var obj = {};\n    Object.keys(data).forEach(function (key) {\n      if (Array.isArray(data[key])) {\n        obj[key] = data[key][num];\n      } else if (!enterOrLeave && !num || enterOrLeave && num) {\n        obj[key] = data[key];\n      }\n    });\n    return obj;\n  };\n\n  this.getTweenData = function (key, i, type) {\n    var props = _this5.props;\n    var enterOrLeave = type === 'enter' ? 0 : 1;\n    var start = type === 'enter' ? 1 : 0;\n    var end = type === 'enter' ? 0 : 1;\n\n    var startAnim = _this5.getAnimData(props, key, i, enterOrLeave, start);\n\n    var animate = _this5.getAnimData(props, key, i, enterOrLeave, end);\n\n    startAnim = type === 'enter' && (props.forcedReplay || !_this5.childrenShow[key]) ? startAnim : null;\n    var ease = transformArguments(props.ease, key, i)[enterOrLeave];\n    var duration = transformArguments(props.duration, key, i)[enterOrLeave];\n\n    if (Array.isArray(ease)) {\n      ease = ease.map(function (num) {\n        return num * 100;\n      });\n      ease = TweenOne.easing.path('M0,100C' + ease[0] + ',' + (100 - ease[1]) + ',' + ease[2] + ',' + (100 - ease[3]) + ',100,0', {\n        lengthPixel: duration / 16.6667\n      });\n    }\n\n    return {\n      startAnim: startAnim,\n      animate: animate,\n      ease: ease,\n      duration: duration,\n      isArray: Array.isArray(animate)\n    };\n  };\n\n  this.getTweenSingleData = function (startAnim, animate, ease, duration, delay, onStart, onComplete) {\n    var startLength = Object.keys(startAnim || {}).length;\n\n    var animation = _extends({\n      onStart: onStart,\n      onComplete: onComplete,\n      duration: duration,\n      delay: delay,\n      ease: ease\n    }, animate);\n\n    var startAnimate = startLength ? _extends({\n      duration: 0\n    }, startAnim) : null;\n    return {\n      animation: animation,\n      startAnimate: startAnimate\n    };\n  };\n\n  this.getTweenEnterOrLeaveData = function (key, i, delay, type) {\n    var animateData = _this5.getTweenData(key, i, type);\n\n    var startAnim = animateData.startAnim;\n    var animate = animateData.animate;\n    var onStart = (type === 'enter' ? _this5.enterBegin : _this5.leaveBegin).bind(_this5, key);\n    var onComplete = (type === 'enter' ? _this5.enterComplete : _this5.leaveComplete).bind(_this5, key);\n\n    if (animateData.isArray) {\n      var length = animate.length - 1;\n      var animation = [];\n      var startArray = [];\n      animate.forEach(function (leave, ii) {\n        var start = startAnim && startAnim[ii];\n\n        var animObj = _this5.getTweenSingleData(start, leave, animateData.ease, animateData.duration / length, !ii ? delay : 0, !ii ? onStart : null, ii === length ? onComplete : null);\n\n        animation.push(animObj.animation);\n\n        if (animObj.startAnimate) {\n          startArray.push(animObj.startAnimate);\n        }\n      });\n      return startArray.concat(animation);\n    }\n\n    animateData = _this5.getTweenSingleData(startAnim, animate, animateData.ease, animateData.duration, delay, onStart, onComplete);\n    return [animateData.startAnimate, animateData.animation].filter(function (item) {\n      return item;\n    });\n  };\n\n  this.getTweenAppearData = function (key, i) {\n    return _extends({}, _this5.getAnimData(_this5.props, key, i, 0, 0), {\n      duration: 0\n    });\n  };\n\n  this.getAnimData = function (props, key, i, enterOrLeave, startOrEnd) {\n    /**\n     * transformArguments 第一个为 enter, 第二个为 leave；\n     * getTweenAnimConfig or getTweenType 第一个为到达的位置， 第二个为开始的位置。\n     * 用 tween-one 的数组来实现老的动画逻辑。。。\n     */\n    return props.animConfig ? _this5.getTweenAnimConfig(transformArguments(props.animConfig, key, i)[enterOrLeave], startOrEnd, enterOrLeave) : _this5.getTweenType(transformArguments(props.type, key, i)[enterOrLeave], startOrEnd);\n  };\n\n  this.getChildrenToRender = function (child) {\n    var _props = _this5.props,\n        forcedReplay = _props.forcedReplay,\n        leaveReverse = _props.leaveReverse,\n        appear = _props.appear,\n        delay = _props.delay,\n        interval = _props.interval;\n\n    if (!child || !child.key) {\n      return child;\n    }\n\n    var key = child.key;\n\n    if (!_this5.state.childrenShow[key]) {\n      return null;\n    }\n\n    var i = _this5.keysToLeave.indexOf(key);\n\n    var animation = void 0;\n    var isFunc = typeof child.type === 'function';\n    var forcedJudg = isFunc ? {} : null;\n\n    if (isFunc) {\n      Object.keys(child.type).forEach(function (name) {\n        if (typeDefault.indexOf(name) === -1) {\n          forcedJudg[name] = child.type[name];\n        }\n      });\n    } // 处理出场\n\n\n    if (i >= 0) {\n      if (_this5.leaveUnfinishedChild.indexOf(key) >= 0) {\n        return _this5.saveTweenOneTag[key];\n      }\n\n      var $interval = transformArguments(interval, key, i)[1];\n      var $delay = transformArguments(delay, key, i)[1]; // 减掉 leaveUnfinishedChild 里的个数，因为 leaveUnfinishedChild 是旧的出场，不应该计录在队列里。\n\n      var order = (leaveReverse ? _this5.keysToLeave.length - i - 1 : i) - _this5.leaveUnfinishedChild.length;\n      $delay = $interval * order + $delay;\n      animation = _this5.getTweenEnterOrLeaveData(key, i, $delay, 'leave');\n    } else {\n      // 处理进场;\n      i = _this5.keysToEnterToCallback.indexOf(key);\n\n      if (!_this5.oneEnter && !appear) {\n        animation = _this5.getTweenAppearData(key, i);\n      } else {\n        animation = _this5.getTweenEnterOrLeaveData(key, i, 0, 'enter');\n      }\n\n      if (_this5.tweenToEnter[key] && !forcedReplay) {\n        // 如果是已进入的，将直接返回标签。。\n        return createElement(TweenOne, {\n          key: key,\n          component: child.type,\n          forcedJudg: forcedJudg,\n          componentProps: child.props\n        });\n      }\n    }\n\n    var paused = _this5.keysToEnterPaused[key] && _this5.keysToLeave.indexOf(key) === -1;\n    animation = paused ? null : animation;\n    var tag = createElement(TweenOne, {\n      key: key,\n      component: child.type,\n      forcedJudg: forcedJudg,\n      componentProps: child.props,\n      animation: animation\n    });\n    _this5.saveTweenOneTag[key] = tag;\n    return tag;\n  };\n\n  this.performEnter = function (key, i) {\n    var interval = transformArguments(_this5.props.interval, key, i)[0];\n    var delay = transformArguments(_this5.props.delay, key, i)[0];\n    _this5.placeholderTimeoutIds[key] = ticker.timeout(_this5.performEnterBegin.bind(_this5, key), interval * i + delay);\n\n    if (_this5.keysToEnter.indexOf(key) >= 0) {\n      _this5.keysToEnter.splice(_this5.keysToEnter.indexOf(key), 1);\n    }\n  };\n\n  this.performEnterBegin = function (key) {\n    var childrenShow = _this5.state.childrenShow;\n    childrenShow[key] = true;\n    delete _this5.keysToEnterPaused[key];\n    ticker.clear(_this5.placeholderTimeoutIds[key]);\n    delete _this5.placeholderTimeoutIds[key];\n\n    _this5.setState({\n      childrenShow: childrenShow\n    });\n  };\n\n  this.performLeave = function (key) {\n    ticker.clear(_this5.placeholderTimeoutIds[key]);\n    delete _this5.placeholderTimeoutIds[key];\n  };\n\n  this.enterBegin = function (key, e) {\n    var elem = e.target;\n    var animatingClassName = _this5.props.animatingClassName;\n    elem.className = elem.className.replace(animatingClassName[1], '');\n\n    if (elem.className.indexOf(animatingClassName[0]) === -1) {\n      elem.className = (elem.className + ' ' + animatingClassName[0]).trim();\n    }\n\n    _this5.childrenShow[key] = true;\n  };\n\n  this.enterComplete = function (key, e) {\n    if (_this5.keysToEnterPaused[key] || _this5.keysToLeave.indexOf(key) >= 0) {\n      return;\n    }\n\n    var elem = e.target;\n    elem.className = elem.className.replace(_this5.props.animatingClassName[0], '').trim();\n    _this5.tweenToEnter[key] = true;\n\n    _this5.props.onEnd({\n      key: key,\n      type: 'enter',\n      target: elem\n    });\n  };\n\n  this.leaveBegin = function (key, e) {\n    var elem = e.target;\n    var animatingClassName = _this5.props.animatingClassName;\n    elem.className = elem.className.replace(animatingClassName[0], '');\n\n    if (elem.className.indexOf(animatingClassName[1]) === -1) {\n      elem.className = (elem.className + ' ' + animatingClassName[1]).trim();\n    }\n\n    delete _this5.tweenToEnter[key];\n  };\n\n  this.leaveComplete = function (key, e) {\n    // 切换时同时触发 onComplete。 手动跳出。。。\n    if (_this5.keysToEnterToCallback.indexOf(key) >= 0) {\n      return;\n    }\n\n    var childrenShow = _this5.state.childrenShow;\n    delete childrenShow[key];\n    delete _this5.saveTweenOneTag[key];\n    delete _this5.childrenShow[key];\n\n    if (_this5.keysToLeave.indexOf(key) >= 0) {\n      _this5.keysToLeave.splice(_this5.keysToLeave.indexOf(key), 1);\n    }\n\n    var needLeave = _this5.keysToLeave.some(function (c) {\n      return childrenShow[c];\n    });\n\n    if (!needLeave) {\n      var currentChildren = toArrayChildren(getChildrenFromProps(_this5.props));\n\n      _this5.setState({\n        children: currentChildren,\n        childrenShow: childrenShow\n      });\n    }\n\n    var elem = e.target;\n    elem.className = elem.className.replace(_this5.props.animatingClassName[1], '').trim();\n\n    _this5.props.onEnd({\n      key: key,\n      type: 'leave',\n      target: elem\n    });\n  };\n};\n\nQueueAnim.isQueueAnim = true;\nexport default QueueAnim;","map":null,"metadata":{},"sourceType":"module"}