{"ast":null,"code":"/* tslint:disable:no-bitwise */\nimport { SWIPE, DIRECTION_NONE, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_DOWN } from './config';\n\nfunction _calcTriangleDistance(x, y) {\n  return Math.sqrt(x * x + y * y);\n}\n\nfunction _calcAngle(x, y) {\n  var radian = Math.atan2(y, x);\n  return 180 / (Math.PI / radian);\n}\n\nexport function now() {\n  return Date.now();\n}\nexport function calcMutliFingerStatus(touches) {\n  if (touches.length < 2) {\n    return;\n  }\n\n  var _touches$ = touches[0],\n      x1 = _touches$.x,\n      y1 = _touches$.y;\n  var _touches$2 = touches[1],\n      x2 = _touches$2.x,\n      y2 = _touches$2.y;\n  var deltaX = x2 - x1;\n  var deltaY = y2 - y1;\n  return {\n    x: deltaX,\n    y: deltaY,\n    z: _calcTriangleDistance(deltaX, deltaY),\n    angle: _calcAngle(deltaX, deltaY)\n  };\n}\nexport function calcMoveStatus(startTouches, touches, time) {\n  var _startTouches$ = startTouches[0],\n      x1 = _startTouches$.x,\n      y1 = _startTouches$.y;\n  var _touches$3 = touches[0],\n      x2 = _touches$3.x,\n      y2 = _touches$3.y;\n  var deltaX = x2 - x1;\n  var deltaY = y2 - y1;\n\n  var deltaZ = _calcTriangleDistance(deltaX, deltaY);\n\n  return {\n    x: deltaX,\n    y: deltaY,\n    z: deltaZ,\n    time: time,\n    velocity: deltaZ / time,\n    angle: _calcAngle(deltaX, deltaY)\n  };\n}\nexport function calcRotation(startMutliFingerStatus, mutliFingerStatus) {\n  var startAngle = startMutliFingerStatus.angle;\n  var angle = mutliFingerStatus.angle;\n  return angle - startAngle;\n}\nexport function getEventName(prefix, status) {\n  return prefix + status[0].toUpperCase() + status.slice(1);\n}\nexport function shouldTriggerSwipe(delta, velocity) {\n  return Math.abs(delta) >= SWIPE.threshold && Math.abs(velocity) > SWIPE.velocity;\n}\nexport function shouldTriggerDirection(direction, directionSetting) {\n  if (directionSetting & direction) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * @private\n * get the direction between two points\n * Note: will change next version\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\n\nexport function getDirection(x, y) {\n  if (x === y) {\n    return DIRECTION_NONE;\n  }\n\n  if (Math.abs(x) >= Math.abs(y)) {\n    return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n  }\n\n  return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n/**\n * @private\n * get the direction between tow points when touch moving\n * Note: will change next version\n * @param {Object} point1 coordinate point, include x & y attributes\n * @param {Object} point2 coordinate point, include x & y attributes\n * @return {Number} direction\n */\n\nexport function getMovingDirection(point1, point2) {\n  var x1 = point1.x,\n      y1 = point1.y;\n  var x2 = point2.x,\n      y2 = point2.y;\n  var deltaX = x2 - x1;\n  var deltaY = y2 - y1;\n\n  if (deltaX === 0 && deltaY === 0) {\n    return DIRECTION_NONE;\n  }\n\n  if (Math.abs(deltaX) >= Math.abs(deltaY)) {\n    return deltaX < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n  }\n\n  return deltaY < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\nexport function getDirectionEventName(direction) {\n  var name = void 0;\n\n  switch (direction) {\n    case DIRECTION_NONE:\n      break;\n\n    case DIRECTION_LEFT:\n      name = 'left';\n      break;\n\n    case DIRECTION_RIGHT:\n      name = 'right';\n      break;\n\n    case DIRECTION_UP:\n      name = 'up';\n      break;\n\n    case DIRECTION_DOWN:\n      name = 'down';\n      break;\n\n    default:\n  }\n\n  return name;\n}","map":null,"metadata":{},"sourceType":"module"}